.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TSHARK 1"
.TH TSHARK 1 "2018-02-23" "2.4.5" "The Wireshark Network Analyzer"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
tshark \- Dump and analyze network traffic
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBtshark\fR
[\ \fB\-2\fR\ ]
[\ \fB\-a\fR\ <capture\ autostop\ condition>\ ]\ ...
[\ \fB\-b\fR\ <capture\ ring\ buffer\ option>]\ ...
[\ \fB\-B\fR\ <capture\ buffer\ size>\ ]\ 
[\ \fB\-c\fR\ <capture\ packet\ count>\ ]
[\ \fB\-C\fR\ <configuration\ profile>\ ]
[\ \fB\-d\fR\ <layer\ type>==<selector>,<decode\-as\ protocol>\ ]
[\ \fB\-D\fR\ ]
[\ \fB\-e\fR\ <field>\ ]
[\ \fB\-E\fR\ <field\ print\ option>\ ]
[\ \fB\-f\fR\ <capture\ filter>\ ]
[\ \fB\-F\fR\ <file\ format>\ ]
[\ \fB\-g\fR\ ]
[\ \fB\-h\fR\ ]
[\ \fB\-H\fR\ <input\ hosts\ file>\ ]
[\ \fB\-i\fR\ <capture\ interface>|\-\ ]
[\ \fB\-j\fR\ <protocol\ match\ filter>\ ]
[\ \fB\-I\fR\ ]
[\ \fB\-K\fR\ <keytab>\ ]
[\ \fB\-l\fR\ ]
[\ \fB\-L\fR\ ]
[\ \fB\-n\fR\ ]
[\ \fB\-N\fR\ <name\ resolving\ flags>\ ]
[\ \fB\-o\fR\ <preference\ setting>\ ]\ ...
[\ \fB\-O\fR\ <protocols>\ ]
[\ \fB\-p\fR\ ]
[\ \fB\-P\fR\ ]
[\ \fB\-q\fR\ ]
[\ \fB\-Q\fR\ ]
[\ \fB\-r\fR\ <infile>\ ]
[\ \fB\-R\fR\ <Read\ filter>\ ]
[\ \fB\-s\fR\ <capture\ snaplen>\ ]
[\ \fB\-S\fR\ <separator>\ ]
[\ \fB\-t\fR\ a|ad|adoy|d|dd|e|r|u|ud|udoy\ ]
[\ \fB\-T\fR\ ek|fields|json|pdml|ps|psml|tabs|text\ ]
[\ \fB\-u\fR\ <seconds\ type>]
[\ \fB\-U\fR\ <tap_name>]
[\ \fB\-v\fR\ ]
[\ \fB\-V\fR\ ]
[\ \fB\-w\fR\ <outfile>|\-\ ]
[\ \fB\-W\fR\ <file\ format\ option>]
[\ \fB\-x\fR\ ]
[\ \fB\-X\fR\ <eXtension\ option>]
[\ \fB\-y\fR\ <capture\ link\ type>\ ]
[\ \fB\-Y\fR\ <displaY\ filter>\ ]
[\ \fB\-M\fR\ <auto\ session\ reset>\ ]
[\ \fB\-z\fR\ <statistics>\ ]
[\ \fB\-\-capture\-comment\fR\ <comment>\ ]
[\ \fB\-\-export\-objects\fR\ <protocol>,<destdir>\ ]
[\ \fB\-\-enable\-protocol\fR\ <proto_name>\ ]
[\ \fB\-\-disable\-protocol\fR\ <proto_name>\ ]
[\ \fB\-\-enable\-heuristic\fR\ <short_name>\ ]
[\ \fB\-\-disable\-heuristic\fR\ <short_name>\ ]
[\ <capture\ filter>\ ]
.PP
\&\fBtshark\fR
\&\fB\-G\fR [ <report type> ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBTShark\fR is a network protocol analyzer.  It lets you capture packet
data from a live network, or read packets from a previously saved
capture file, either printing a decoded form of those packets to the
standard output or writing the packets to a file.  \fBTShark\fR's native
capture file format is \fBpcap\fR format, which is also the format used
by \fBtcpdump\fR and various other tools.
.PP
Without any options set, \fBTShark\fR will work much like \fBtcpdump\fR.  It will
use the pcap library to capture traffic from the first available network
interface and displays a summary line on stdout for each received packet.
.PP
\&\fBTShark\fR is able to detect, read and write the same capture files that
are supported by \fBWireshark\fR.
The input file doesn't need a specific filename extension; the file
format and an optional gzip compression will be automatically detected.
Near the beginning of the \s-1DESCRIPTION\s0 section of \fIwireshark\fR\|(1) or
<https://www.wireshark.org/docs/man\-pages/wireshark.html>
is a detailed description of the way \fBWireshark\fR handles this, which is
the same way \fBTshark\fR handles this.
.PP
Compressed file support uses (and therefore requires) the zlib library.
If the zlib library is not present, \fBTShark\fR will compile, but will
be unable to read compressed files.
.PP
If the \fB\-w\fR option is not specified, \fBTShark\fR writes to the standard
output the text of a decoded form of the packets it captures or reads.
If the \fB\-w\fR option is specified, \fBTShark\fR writes to the file
specified by that option the raw data of the packets, along with the
packets' time stamps.
.PP
When writing a decoded form of packets, \fBTShark\fR writes, by
default, a summary line containing the fields specified by the
preferences file (which are also the fields displayed in the packet list
pane in \fBWireshark\fR), although if it's writing packets as it captures
them, rather than writing packets from a saved capture file, it won't
show the \*(L"frame number\*(R" field.  If the \fB\-V\fR option is specified, it
writes instead a view of the details of the packet, showing all the
fields of all protocols in the packet.  If the \fB\-O\fR option is specified,
it will only show the full protocols specified.  Use the output of
"\fBtshark \-G protocols\fR" to find the abbreviations of the protocols you can
specify.
.PP
If you want to write the decoded form of packets to a file, run
\&\fBTShark\fR without the \fB\-w\fR option, and redirect its standard output to
the file (do \fInot\fR use the \fB\-w\fR option).
.PP
When writing packets to a file, \fBTShark\fR, by default, writes the
file in \fBpcap\fR format, and writes all of the packets it sees to the
output file.  The \fB\-F\fR option can be used to specify the format in which
to write the file.  This list of available file formats is displayed by
the \fB\-F\fR flag without a value.  However, you can't specify a file format
for a live capture.
.PP
Read filters in \fBTShark\fR, which allow you to select which packets
are to be decoded or written to a file, are very powerful; more fields
are filterable in \fBTShark\fR than in other protocol analyzers, and the
syntax you can use to create your filters is richer.  As \fBTShark\fR
progresses, expect more and more protocol fields to be allowed in read
filters.
.PP
Packet capturing is performed with the pcap library.  The capture filter
syntax follows the rules of the pcap library.  This syntax is different
from the read filter syntax.  A read filter can also be specified when
capturing, and only packets that pass the read filter will be displayed
or saved to the output file; note, however, that capture filters are much
more efficient than read filters, and it may be more difficult for
\&\fBTShark\fR to keep up with a busy network if a read filter is
specified for a live capture.
.PP
A capture or read filter can either be specified with the \fB\-f\fR or \fB\-R\fR
option, respectively, in which case the entire filter expression must be
specified as a single argument (which means that if it contains spaces,
it must be quoted), or can be specified with command-line arguments
after the option arguments, in which case all the arguments after the
filter arguments are treated as a filter expression.  Capture filters
are supported only when doing a live capture; read filters are supported
when doing a live capture and when reading a capture file, but require
TShark to do more work when filtering, so you might be more likely to
lose packets under heavy load if you're using a read filter.  If the
filter is specified with command-line arguments after the option
arguments, it's a capture filter if a capture is being done (i.e., if no
\&\fB\-r\fR option was specified) and a read filter if a capture file is being
read (i.e., if a \fB\-r\fR option was specified).
.PP
The \fB\-G\fR option is a special mode that simply causes \fBTshark\fR
to dump one of several types of internal glossaries and then exit.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-2" 4
.IX Item "-2"
Perform a two-pass analysis. This causes tshark to buffer output until the
entire first pass is done, but allows it to fill in fields that require future
knowledge, such as 'response in frame #' fields. Also permits reassembly
frame dependencies to be calculated correctly.
.IP "\-a  <capture autostop condition>" 4
.IX Item "-a <capture autostop condition>"
Specify a criterion that specifies when \fBTShark\fR is to stop writing
to a capture file.  The criterion is of the form \fItest\fR\fB:\fR\fIvalue\fR,
where \fItest\fR is one of:
.Sp
\&\fBduration\fR:\fIvalue\fR Stop writing to a capture file after \fIvalue\fR seconds
have elapsed.
.Sp
\&\fBfilesize\fR:\fIvalue\fR Stop writing to a capture file after it reaches a size of
\&\fIvalue\fR kB.  If this option is used together with the \-b option, \fBTShark\fR
will stop writing to the current capture file and switch to the next one if
filesize is reached.  When reading a capture file, \fBTShark\fR will stop reading
the file after the number of bytes read exceeds this number (the complete
packet  will be read, so more bytes than this number may be read).  Note that
the filesize is limited to a maximum value of 2 GiB.
.Sp
\&\fBfiles\fR:\fIvalue\fR Stop writing to capture files after \fIvalue\fR number of files
were written.
.IP "\-b  <capture ring buffer option>" 4
.IX Item "-b <capture ring buffer option>"
Cause \fBTShark\fR to run in \*(L"multiple files\*(R" mode.  In \*(L"multiple files\*(R" mode,
\&\fBTShark\fR will write to several capture files.  When the first capture file
fills up, \fBTShark\fR will switch writing to the next file and so on.
.Sp
The created filenames are based on the filename given with the \fB\-w\fR option,
the number of the file and on the creation date and time,
e.g. outfile_00001_20050604120117.pcap, outfile_00002_20050604120523.pcap, ...
.Sp
With the \fIfiles\fR option it's also possible to form a \*(L"ring buffer\*(R".
This will fill up new files until the number of files specified,
at which point \fBTShark\fR will discard the data in the first file and start
writing to that file and so on.  If the \fIfiles\fR option is not set,
new files filled up until one of the capture stop conditions match (or
until the disk is full).
.Sp
The criterion is of the form \fIkey\fR\fB:\fR\fIvalue\fR,
where \fIkey\fR is one of:
.Sp
\&\fBduration\fR:\fIvalue\fR switch to the next file after \fIvalue\fR seconds have
elapsed, even if the current file is not completely filled up.
.Sp
\&\fBfilesize\fR:\fIvalue\fR switch to the next file after it reaches a size of
\&\fIvalue\fR kB.  Note that the filesize is limited to a maximum value of 2 GiB.
.Sp
\&\fBfiles\fR:\fIvalue\fR begin again with the first file after \fIvalue\fR number of
files were written (form a ring buffer).  This value must be less than 100000.
Caution should be used when using large numbers of files: some filesystems do
not handle many files in a single directory well.  The \fBfiles\fR criterion
requires either \fBduration\fR or \fBfilesize\fR to be specified to control when to
go to the next file.  It should be noted that each \fB\-b\fR parameter takes exactly
one criterion; to specify two criterion, each must be preceded by the \fB\-b\fR
option.
.Sp
Example: \fB\-b filesize:1000 \-b files:5\fR results in a ring buffer of five files
of size one megabyte each.
.IP "\-B  <capture buffer size>" 4
.IX Item "-B <capture buffer size>"
Set capture buffer size (in MiB, default is 2 MiB).  This is used by
the capture driver to buffer packet data until that data can be written
to disk.  If you encounter packet drops while capturing, try to increase
this size.  Note that, while \fBTshark\fR attempts to set the buffer size
to 2 MiB by default, and can be told to set it to a larger value, the
system or interface on which you're capturing might silently limit the
capture buffer size to a lower value or raise it to a higher value.
.Sp
This is available on \s-1UNIX\s0 systems with libpcap 1.0.0 or later and on
Windows.  It is not available on \s-1UNIX\s0 systems with earlier versions of
libpcap.
.Sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fR option, it sets the default capture buffer size.
If used after an \fB\-i\fR option, it sets the capture buffer size for
the interface specified by the last \fB\-i\fR option occurring before
this option.  If the capture buffer size is not set specifically,
the default capture buffer size is used instead.
.IP "\-c  <capture packet count>" 4
.IX Item "-c <capture packet count>"
Set the maximum number of packets to read when capturing live
data.  If reading a capture file, set the maximum number of packets to read.
.IP "\-C  <configuration profile>" 4
.IX Item "-C <configuration profile>"
Run with the given configuration profile.
.IP "\-d  <layer type>==<selector>,<decode\-as protocol>" 4
.IX Item "-d <layer type>==<selector>,<decode-as protocol>"
Like Wireshark's \fBDecode As...\fR feature, this lets you specify how a
layer type should be dissected.  If the layer type in question (for example,
\&\fBtcp.port\fR or \fBudp.port\fR for a \s-1TCP\s0 or \s-1UDP\s0 port number) has the specified
selector value, packets should be dissected as the specified protocol.
.Sp
Example: \fB\-d tcp.port==8888,http\fR will decode any traffic running over
\&\s-1TCP\s0 port 8888 as \s-1HTTP.\s0
.Sp
Example: \fB\-d tcp.port==8888:3,http\fR will decode any traffic running over
\&\s-1TCP\s0 ports 8888, 8889 or 8890 as \s-1HTTP.\s0
.Sp
Example: \fB\-d tcp.port==8888\-8890,http\fR will decode any traffic running over
\&\s-1TCP\s0 ports 8888, 8889 or 8890 as \s-1HTTP.\s0
.Sp
Using an invalid selector or protocol will print out a list of valid selectors
and protocol names, respectively.
.Sp
Example: \fB\-d .\fR is a quick way to get a list of valid selectors.
.Sp
Example: \fB\-d ethertype==0x0800.\fR is a quick way to get a list of protocols that can be
selected with an ethertype.
.IP "\-D" 4
.IX Item "-D"
Print a list of the interfaces on which \fBTShark\fR can capture, and
exit.  For each network interface, a number and an
interface name, possibly followed by a text description of the
interface, is printed.  The interface name or the number can be supplied
to the \fB\-i\fR option to specify an interface on which to capture.
.Sp
This can be useful on systems that don't have a command to list them
(\s-1UNIX\s0 systems lacking \fBifconfig \-a\fR or Linux systems lacking
\&\fBip link show\fR). The number can be useful on Windows systems, where
the interface name might be a long name or a \s-1GUID.\s0
.Sp
Note that \*(L"can capture\*(R" means that \fBTShark\fR was able to open that
device to do a live capture.  Depending on your system you may need to
run tshark from an account with special privileges (for example, as
root) to be able to capture network traffic.  If \fBTShark \-D\fR is not run
from such an account, it will not list any interfaces.
.IP "\-e  <field>" 4
.IX Item "-e <field>"
Add a field to the list of fields to display if \fB\-T ek|fields|json|pdml\fR
is selected.  This option can be used multiple times on the command line.
At least one field must be provided if the \fB\-T fields\fR option is
selected. Column names may be used prefixed with \*(L"_ws.col.\*(R"
.Sp
Example: \fB\-e frame.number \-e ip.addr \-e udp \-e _ws.col.Info\fR
.Sp
Giving a protocol rather than a single field will print multiple items
of data about the protocol as a single field.  Fields are separated by
tab characters by default.  \fB\-E\fR controls the format of the printed
fields.
.IP "\-E  <field print option>" 4
.IX Item "-E <field print option>"
Set an option controlling the printing of fields when \fB\-T fields\fR is
selected.
.Sp
Options are:
.Sp
\&\fBbom=y|n\fR If \fBy\fR, prepend output with the \s-1UTF\-8\s0 byte order mark
(hexadecimal ef, bb, bf). Defaults to \fBn\fR.
.Sp
\&\fBheader=y|n\fR If \fBy\fR, print a list of the field names given using \fB\-e\fR
as the first line of the output; the field name will be separated using
the same character as the field values.  Defaults to \fBn\fR.
.Sp
\&\fBseparator=/t|/s|\fR<character> Set the separator character to
use for fields.  If \fB/t\fR tab will be used (this is the default), if
\&\fB/s\fR, a single space will be used.  Otherwise any character that can be
accepted by the command line as part of the option may be used.
.Sp
\&\fBoccurrence=f|l|a\fR Select which occurrence to use for fields that have
multiple occurrences.  If \fBf\fR the first occurrence will be used, if \fBl\fR
the last occurrence will be used and if \fBa\fR all occurrences will be used
(this is the default).
.Sp
\&\fBaggregator=,|/s|\fR<character> Set the aggregator character to
use for fields that have multiple occurrences.  If \fB,\fR a comma will be used
(this is the default), if \fB/s\fR, a single space will be used.  Otherwise
any character that can be accepted by the command line as part of the
option may be used.
.Sp
\&\fBquote=d|s|n\fR Set the quote character to use to surround fields.  \fBd\fR
uses double-quotes, \fBs\fR single-quotes, \fBn\fR no quotes (the default).
.IP "\-f  <capture filter>" 4
.IX Item "-f <capture filter>"
Set the capture filter expression.
.Sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fR option, it sets the default capture filter expression.
If used after an \fB\-i\fR option, it sets the capture filter expression for
the interface specified by the last \fB\-i\fR option occurring before
this option.  If the capture filter expression is not set specifically,
the default capture filter expression is used if provided.
.Sp
Pre-defined capture filter names, as shown in the \s-1GUI\s0 menu item Capture\->Capture Filters,
can be used by prefixing the argument with \*(L"predef:\*(R".
Example: \fB\-f \*(L"predef:MyPredefinedHostOnlyFilter\*(R"\fR
.IP "\-F  <file format>" 4
.IX Item "-F <file format>"
Set the file format of the output capture file written using the \fB\-w\fR
option.  The output written with the \fB\-w\fR option is raw packet data, not
text, so there is no \fB\-F\fR option to request text output.  The option \fB\-F\fR
without a value will list the available formats.
.IP "\-g" 4
.IX Item "-g"
This option causes the output file(s) to be created with group-read permission
(meaning that the output file(s) can be read by other members of the calling
user's group).
.IP "\-G  [ <report type> ]" 4
.IX Item "-G [ <report type> ]"
The \fB\-G\fR option will cause \fBTshark\fR to dump one of several types of glossaries
and then exit.  If no specific glossary type is specified, then the \fBfields\fR report will be generated by default.
.Sp
The available report types include:
.Sp
\&\fBcolumn-formats\fR Dumps the column formats understood by tshark.
There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 2
\& * Field 1 = format string (e.g. "%rD")
\& * Field 2 = text description of format string (e.g. "Dest port (resolved)")
.Ve
.Sp
\&\fBcurrentprefs\fR  Dumps a copy of the current preferences file to stdout.
.Sp
\&\fBdecodes\fR Dumps the \*(L"layer type\*(R"/\*(L"decode as\*(R" associations to stdout.
There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 3
\& * Field 1 = layer type, e.g. "tcp.port"
\& * Field 2 = selector in decimal
\& * Field 3 = "decode as" name, e.g. "http"
.Ve
.Sp
\&\fBdefaultprefs\fR  Dumps a default preferences file to stdout.
.Sp
\&\fBdissector-tables\fR  Dumps a list of dissector tables to stdout.  There
is one record per line.  The fields are tab-delimited.
.Sp
.Vb 4
\& * Field 1 = dissector table name, e.g. "tcp.port"
\& * Field 2 = name used for the dissector table in the GUI
\& * Field 3 = type (textual representation of the ftenum type)
\& * Field 4 = base for display (for integer types)
.Ve
.Sp
\&\fBfieldcount\fR  Dumps the number of header fields to stdout.
.Sp
\&\fBfields\fR  Dumps the contents of the registration database to
stdout.  An independent program can take this output and format it into nice
tables or \s-1HTML\s0 or whatever.  There is one record per line.  Each record is
either a protocol or a header field, differentiated by the first field.
The fields are tab-delimited.
.Sp
.Vb 10
\& * Protocols
\& * \-\-\-\-\-\-\-\-\-
\& * Field 1 = \*(AqP\*(Aq
\& * Field 2 = descriptive protocol name
\& * Field 3 = protocol abbreviation
\& *
\& * Header Fields
\& * \-\-\-\-\-\-\-\-\-\-\-\-\-
\& * Field 1 = \*(AqF\*(Aq
\& * Field 2 = descriptive field name
\& * Field 3 = field abbreviation
\& * Field 4 = type (textual representation of the ftenum type)
\& * Field 5 = parent protocol abbreviation
\& * Field 6 = base for display (for integer types); "parent bitfield width" for FT_BOOLEAN
\& * Field 7 = bitmask: format: hex: 0x....
\& * Field 8 = blurb describing field
.Ve
.Sp
\&\fBfolders\fR Dumps various folders used by tshark.  This is essentially the
same data reported in Wireshark's About | Folders tab.
There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 2
\& * Field 1 = Folder type (e.g "Personal configuration:")
\& * Field 2 = Folder location (e.g. "/home/vagrant/.config/wireshark/")
.Ve
.Sp
\&\fBftypes\fR Dumps the \*(L"ftypes\*(R" (fundamental types) understood by tshark.
There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 2
\& * Field 1 = FTYPE (e.g "FT_IPv6")
\& * Field 2 = text description of type (e.g. "IPv6 address")
.Ve
.Sp
\&\fBheuristic-decodes\fR Dumps the heuristic decodes currently installed.
There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 3
\& * Field 1 = underlying dissector (e.g. "tcp")
\& * Field 2 = name of heuristic decoder (e.g. ucp")
\& * Field 3 = heuristic enabled (e.g. "T" or "F")
.Ve
.Sp
\&\fBplugins\fR Dumps the plugins currently installed.
There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 4
\& * Field 1 = plugin library (e.g. "gryphon.so")
\& * Field 2 = plugin version (e.g. 0.0.4)
\& * Field 3 = plugin type (e.g. "dissector" or "tap")
\& * Field 4 = full path to plugin file
.Ve
.Sp
\&\fBprotocols\fR Dumps the protocols in the registration database to stdout.
An independent program can take this output and format it into nice tables
or \s-1HTML\s0 or whatever.  There is one record per line.  The fields are tab-delimited.
.Sp
.Vb 3
\& * Field 1 = protocol name
\& * Field 2 = protocol short name
\& * Field 3 = protocol filter name
.Ve
.Sp
\&\fBvalues\fR Dumps the value_strings, range_strings or true/false strings
for fields that have them.  There is one record per line.  Fields are
tab-delimited.  There are three types of records: Value String, Range
String and True/False String.  The first field, 'V', 'R' or 'T', indicates
the type of record.
.Sp
.Vb 10
\& * Value Strings
\& * \-\-\-\-\-\-\-\-\-\-\-\-\-
\& * Field 1 = \*(AqV\*(Aq
\& * Field 2 = field abbreviation to which this value string corresponds
\& * Field 3 = Integer value
\& * Field 4 = String
\& *
\& * Range Strings
\& * \-\-\-\-\-\-\-\-\-\-\-\-\-
\& * Field 1 = \*(AqR\*(Aq
\& * Field 2 = field abbreviation to which this range string corresponds
\& * Field 3 = Integer value: lower bound
\& * Field 4 = Integer value: upper bound
\& * Field 5 = String
\& *
\& * True/False Strings
\& * \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& * Field 1 = \*(AqT\*(Aq
\& * Field 2 = field abbreviation to which this true/false string corresponds
\& * Field 3 = True String
\& * Field 4 = False String
.Ve
.IP "\-h" 4
.IX Item "-h"
.PD 0
.IP "\-\-help" 4
.IX Item "--help"
.PD
Print the version and options and exit.
.IP "\-H  <input hosts file>" 4
.IX Item "-H <input hosts file>"
Read a list of entries from a \*(L"hosts\*(R" file, which will then be written
to a capture file.  Implies \fB\-W n\fR. Can be called multiple times.
.Sp
The \*(L"hosts\*(R" file format is documented at
<http://en.wikipedia.org/wiki/Hosts_(file)>.
.IP "\-i  <capture interface> | \-" 4
.IX Item "-i <capture interface> | -"
Set the name of the network interface or pipe to use for live packet
capture.
.Sp
Network interface names should match one of the names listed in
"\fBtshark \-D\fR\*(L" (described above); a number, as reported by
\&\*(R"\fBtshark \-D\fR\*(L", can also be used.  If you're using \s-1UNIX, \*(R"\s0\fBnetstat
\&\-i\fR\*(L" or \*(R"\fBifconfig \-a\fR" might also work to list interface names,
although not all versions of \s-1UNIX\s0 support the \fB\-a\fR option to \fBifconfig\fR.
.Sp
If no interface is specified, \fBTShark\fR searches the list of
interfaces, choosing the first non-loopback interface if there are any
non-loopback interfaces, and choosing the first loopback interface if
there are no non-loopback interfaces.  If there are no interfaces at all,
\&\fBTShark\fR reports an error and doesn't start the capture.
.Sp
Pipe names should be either the name of a \s-1FIFO \s0(named pipe) or ``\-'' to
read data from the standard input.  Data read from pipes must be in
standard pcap format.
.Sp
This option can occur multiple times.  When capturing from multiple
interfaces, the capture file will be saved in pcap-ng format.
.Sp
Note: the Win32 version of \fBTShark\fR doesn't support capturing from
pipes!
.IP "\-I" 4
.IX Item "-I"
Put the interface in \*(L"monitor mode\*(R"; this is supported only on \s-1IEEE
802.11\s0 Wi-Fi interfaces, and supported only on some operating systems.
.Sp
Note that in monitor mode the adapter might disassociate from the
network with which it's associated, so that you will not be able to use
any wireless networks with that adapter.  This could prevent accessing
files on a network server, or resolving host names or network addresses,
if you are capturing in monitor mode and are not connected to another
network with another adapter.
.Sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fR option, it enables the monitor mode for all interfaces.
If used after an \fB\-i\fR option, it enables the monitor mode for
the interface specified by the last \fB\-i\fR option occurring before
this option.
.IP "\-j  <protocol match filter>" 4
.IX Item "-j <protocol match filter>"
Protocol match filter used for ek|json|jsonraw|pdml output file types.
Parent node containing multiple child nodes is only included,
if the name is found in the filter.
.Sp
Example: \fB\-j \*(L"ip ip.flags text\*(R"\fR
.IP "\-J  <protocol match filter>" 4
.IX Item "-J <protocol match filter>"
Protocol top level filter used for ek|json|jsonraw|pdml output file types.
Parent node containing multiple child nodes is included with all children.
.Sp
Example: \fB\-J \*(L"http tcp\*(R"\fR
.IP "\-K  <keytab>" 4
.IX Item "-K <keytab>"
Load kerberos crypto keys from the specified keytab file.
This option can be used multiple times to load keys from several files.
.Sp
Example: \fB\-K krb5.keytab\fR
.IP "\-l" 4
.IX Item "-l"
Flush the standard output after the information for each packet is
printed.  (This is not, strictly speaking, line-buffered if \fB\-V\fR
was specified; however, it is the same as line-buffered if \fB\-V\fR wasn't
specified, as only one line is printed for each packet, and, as \fB\-l\fR is
normally used when piping a live capture to a program or script, so that
output for a packet shows up as soon as the packet is seen and
dissected, it should work just as well as true line-buffering.  We do
this as a workaround for a deficiency in the Microsoft Visual \*(C+ C
library.)
.Sp
This may be useful when piping the output of \fBTShark\fR to another
program, as it means that the program to which the output is piped will
see the dissected data for a packet as soon as \fBTShark\fR sees the
packet and generates that output, rather than seeing it only when the
standard output buffer containing that data fills up.
.IP "\-L" 4
.IX Item "-L"
List the data link types supported by the interface and exit.  The reported
link types can be used for the \fB\-y\fR option.
.IP "\-n" 4
.IX Item "-n"
Disable network object name resolution (such as hostname, \s-1TCP\s0 and \s-1UDP\s0 port
names); the \fB\-N\fR flag might override this one.
.IP "\-N  <name resolving flags>" 4
.IX Item "-N <name resolving flags>"
Turn on name resolving only for particular types of addresses and port
numbers, with name resolving for other types of addresses and port
numbers turned off.  This flag overrides \fB\-n\fR if both \fB\-N\fR and \fB\-n\fR are
present.  If both \fB\-N\fR and \fB\-n\fR flags are not present, all name resolutions
are turned on.
.Sp
The argument is a string that may contain the letters:
.Sp
\&\fBd\fR to enable resolution from captured \s-1DNS\s0 packets
.Sp
\&\fBm\fR to enable \s-1MAC\s0 address resolution
.Sp
\&\fBn\fR to enable network address resolution
.Sp
\&\fBN\fR to enable using external resolvers (e.g., \s-1DNS\s0) for network address
resolution
.Sp
\&\fBt\fR to enable transport-layer port number resolution
.IP "\-o  <preference>:<value>" 4
.IX Item "-o <preference>:<value>"
Set a preference value, overriding the default value and any value read
from a preference file.  The argument to the option is a string of the
form \fIprefname\fR\fB:\fR\fIvalue\fR, where \fIprefname\fR is the name of the
preference (which is the same name that would appear in the preference
file), and \fIvalue\fR is the value to which it should be set.
.IP "\-O  <protocols>" 4
.IX Item "-O <protocols>"
Similar to the \fB\-V\fR option, but causes \fBTShark\fR to only show a detailed view
of the comma-separated list of \fIprotocols\fR specified, rather than a detailed
view of all protocols.  Use the output of "\fBtshark \-G protocols\fR" to find the
abbreviations of the protocols you can specify.
.IP "\-p" 4
.IX Item "-p"
\&\fIDon't\fR put the interface into promiscuous mode.  Note that the
interface might be in promiscuous mode for some other reason; hence,
\&\fB\-p\fR cannot be used to ensure that the only traffic that is captured is
traffic sent to or from the machine on which \fBTShark\fR is running,
broadcast traffic, and multicast traffic to addresses received by that
machine.
.Sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fR option, no interface will be put into the
promiscuous mode.
If used after an \fB\-i\fR option, the interface specified by the last \fB\-i\fR
option occurring before this option will not be put into the
promiscuous mode.
.IP "\-P" 4
.IX Item "-P"
.PD 0
.IP "\-\-print" 4
.IX Item "--print"
.PD
Decode and display the packet summary or details, even if writing raw
packet data using the \fB\-w\fR option.
.IP "\-q" 4
.IX Item "-q"
When capturing packets, don't display the continuous count of packets
captured that is normally shown when saving a capture to a file;
instead, just display, at the end of the capture, a count of packets
captured.  On systems that support the \s-1SIGINFO\s0 signal, such as various
BSDs, you can cause the current count to be displayed by typing your
\&\*(L"status\*(R" character (typically control-T, although it
might be set to \*(L"disabled\*(R" by default on at least some BSDs, so you'd
have to explicitly set it to use it).
.Sp
When reading a capture file, or when capturing and not saving to a file,
don't print packet information; this is useful if you're using a \fB\-z\fR
option to calculate statistics and don't want the packet information
printed, just the statistics.
.IP "\-Q" 4
.IX Item "-Q"
When capturing packets, only display true errors.  This outputs less
than the \fB\-q\fR option, so the interface name and total packet
count and the end of a capture are not sent to stderr.
.IP "\-r  <infile>" 4
.IX Item "-r <infile>"
Read packet data from \fIinfile\fR, can be any supported capture file format
(including gzipped files).  It is possible to use named pipes or stdin (\-)
here but only with certain (not compressed) capture file formats (in
particular: those that can be read without seeking backwards).
.IP "\-R  <Read filter>" 4
.IX Item "-R <Read filter>"
Cause the specified filter (which uses the syntax of read/display filters,
rather than that of capture filters) to be applied during the first pass of
analysis. Packets not matching the filter are not considered for future
passes. Only makes sense with multiple passes, see \-2. For regular filtering
on single-pass dissect see \-Y instead.
.Sp
Note that forward-looking fields such as 'response in frame #' cannot be used
with this filter, since they will not have been calculate when this filter is
applied.
.IP "\-s  <capture snaplen>" 4
.IX Item "-s <capture snaplen>"
Set the default snapshot length to use when capturing live data.
No more than \fIsnaplen\fR bytes of each network packet will be read into
memory, or saved to disk.  A value of 0 specifies a snapshot length of
262144, so that the full packet is captured; this is the default.
.Sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fR option, it sets the default snapshot length.
If used after an \fB\-i\fR option, it sets the snapshot length for
the interface specified by the last \fB\-i\fR option occurring before
this option.  If the snapshot length is not set specifically,
the default snapshot length is used if provided.
.IP "\-S  <separator>" 4
.IX Item "-S <separator>"
Set the line separator to be printed between packets.
.IP "\-t  a|ad|adoy|d|dd|e|r|u|ud|udoy" 4
.IX Item "-t a|ad|adoy|d|dd|e|r|u|ud|udoy"
Set the format of the packet timestamp printed in summary lines.
The format can be one of:
.Sp
\&\fBa\fR absolute: The absolute time, as local time in your time zone,
is the actual time the packet was captured, with no date displayed
.Sp
\&\fBad\fR absolute with date: The absolute date, displayed as YYYY-MM-DD,
and time, as local time in your time zone, is the actual time and date
the packet was captured
.Sp
\&\fBadoy\fR absolute with date using day of year: The absolute date,
displayed as \s-1YYYY/DOY,\s0 and time, as local time in your time zone,
is the actual time and date the packet was captured
.Sp
\&\fBd\fR delta: The delta time is the time since the previous packet was
captured
.Sp
\&\fBdd\fR delta_displayed: The delta_displayed time is the time since the
previous displayed packet was captured
.Sp
\&\fBe\fR epoch: The time in seconds since epoch (Jan 1, 1970 00:00:00)
.Sp
\&\fBr\fR relative: The relative time is the time elapsed between the first packet
and the current packet
.Sp
\&\fBu\fR \s-1UTC:\s0 The absolute time, as \s-1UTC,\s0 is the actual time the packet was
captured, with no date displayed
.Sp
\&\fBud\fR \s-1UTC\s0 with date: The absolute date, displayed as YYYY-MM-DD,
and time, as \s-1UTC,\s0 is the actual time and date the packet was captured
.Sp
\&\fBudoy\fR \s-1UTC\s0 with date using day of year: The absolute date, displayed
as \s-1YYYY/DOY,\s0 and time, as \s-1UTC,\s0 is the actual time and date the packet
was captured
.Sp
The default format is relative.
.IP "\-T  ek|fields|json|jsonraw|pdml|ps|psml|tabs|text" 4
.IX Item "-T ek|fields|json|jsonraw|pdml|ps|psml|tabs|text"
Set the format of the output when viewing decoded packet data.  The
options are one of:
.Sp
\&\fBek\fR Newline delimited \s-1JSON\s0 format for bulk import into Elasticsearch.
It can be used with \fB\-j\fR or \fB\-J\fR including the \s-1JSON\s0 filter or with
\&\fB\-x\fR flag to include raw hex-encoded packet data.
Example of usage to import data into Elasticsearch:
.Sp
.Vb 2
\&  tshark \-T ek \-j "http tcp ip" \-x \-r file.pcap > file.json
\&  curl \-XPUT http://elasticsearch:9200/_bulk \-\-data\-binary @file.json
.Ve
.Sp
\&\fBfields\fR The values of fields specified with the \fB\-e\fR option, in a
form specified by the \fB\-E\fR option.  For example,
.Sp
.Vb 1
\&  \-T fields \-E separator=, \-E quote=d
.Ve
.Sp
would generate comma-separated values (\s-1CSV\s0) output suitable for importing
into your favorite spreadsheet program.
.Sp
\&\fBjson\fR \s-1JSON\s0 file format. It can be used with \fB\-j\fR or \fB\-J\fR including
the \s-1JSON\s0 filter or with \fB\-x\fR flag to include raw hex-encoded packet data.
Example of usage:
.Sp
.Vb 2
\&  tshark \-T json \-r file.pcap
\&  tshark \-T json \-j "http tcp ip" \-x \-r file.pcap
.Ve
.Sp
\&\fBjsonraw\fR \s-1JSON\s0 file format including only raw hex-encoded packet data.
It can be used with \fB\-j\fR including or \fB\-J \fRthe \s-1JSON\s0 filter flag.
Example of usage:
.Sp
.Vb 2
\&  tshark \-T jsonraw \-r file.pcap
\&  tshark \-T jsonraw \-j "http tcp ip" \-x \-r file.pcap
.Ve
.Sp
\&\fBpdml\fR Packet Details Markup Language, an XML-based format for the details of
a decoded packet.  This information is equivalent to the packet details
printed with the \fB\-V\fR flag.
.Sp
\&\fBps\fR PostScript for a human-readable one-line summary of each of the packets,
or a multi-line view of the details of each of the packets, depending on
whether the \fB\-V\fR flag was specified.
.Sp
\&\fBpsml\fR Packet Summary Markup Language, an XML-based format for the summary
information of a decoded packet.  This information is equivalent to the
information shown in the one-line summary printed by default.
.Sp
\&\fBtabs\fR Similar to the default \fBtext\fR report except the human-readable one-line
summary of each packet will include an \s-1ASCII\s0 horizontal tab (0x09) character
as a delimiter between each column.
.Sp
\&\fBtext\fR Text of a human-readable one-line summary of each of the packets, or a
multi-line view of the details of each of the packets, depending on
whether the \fB\-V\fR flag was specified.  This is the default.
.IP "\-u <seconds type>" 4
.IX Item "-u <seconds type>"
Specifies the seconds type.  Valid choices are:
.Sp
\&\fBs\fR for seconds
.Sp
\&\fBhms\fR for hours, minutes and seconds
.IP "\-U <tap name>" 4
.IX Item "-U <tap name>"
PDUs export, exports PDUs from infile to outfile according to the tap name given. Use \-Y to filter.
.Sp
Enter an empty tap name "" to get a list of available names.
.IP "\-v" 4
.IX Item "-v"
.PD 0
.IP "\-\-version" 4
.IX Item "--version"
.PD
Print the version and exit.
.IP "\-V" 4
.IX Item "-V"
Cause \fBTShark\fR to print a view of the packet details.
.IP "\-w  <outfile> | \-" 4
.IX Item "-w <outfile> | -"
Write raw packet data to \fIoutfile\fR or to the standard output if
\&\fIoutfile\fR is '\-'.
.Sp
\&\s-1NOTE:\s0 \-w provides raw packet data, not text.  If you want text output
you need to redirect stdout (e.g. using '>'), don't use the \fB\-w\fR
option for this.
.IP "\-W  <file format option>" 4
.IX Item "-W <file format option>"
Save extra information in the file if the format supports it.  For
example,
.Sp
.Vb 1
\&  \-F pcapng \-W n
.Ve
.Sp
will save host name resolution records along with captured packets.
.Sp
Future versions of Wireshark may automatically change the capture format to
\&\fBpcapng\fR as needed.
.Sp
The argument is a string that may contain the following letter:
.Sp
\&\fBn\fR write network address resolution information (pcapng only)
.IP "\-x" 4
.IX Item "-x"
Cause \fBTShark\fR to print a hex and \s-1ASCII\s0 dump of the packet data
after printing the summary and/or details, if either are also being displayed.
.IP "\-X <eXtension options>" 4
.IX Item "-X <eXtension options>"
Specify an option to be passed to a \fBTShark\fR module.  The eXtension option
is in the form \fIextension_key\fR\fB:\fR\fIvalue\fR, where \fIextension_key\fR can be:
.Sp
\&\fBlua_script\fR:\fIlua_script_filename\fR tells \fBTShark\fR to load the given script in addition to the
default Lua scripts.
.Sp
\&\fBlua_script\fR\fInum\fR:\fIargument\fR tells \fBTShark\fR to pass the given argument
to the lua script identified by 'num', which is the number indexed order of the 'lua_script' command.
For example, if only one script was loaded with '\-X lua_script:my.lua', then '\-X lua_script1:foo'
will pass the string 'foo' to the 'my.lua' script.  If two scripts were loaded, such as '\-X lua_script:my.lua'
and '\-X lua_script:other.lua' in that order, then a '\-X lua_script2:bar' would pass the string 'bar' to the second lua
script, namely 'other.lua'.
.Sp
\&\fBread_format\fR:\fIfile_format\fR tells \fBTShark\fR to use the given file format to read in the
file (the file given in the \fB\-r\fR command option). Providing no \fIfile_format\fR argument, or
an invalid one, will produce a file of available file formats to use.
.IP "\-y  <capture link type>" 4
.IX Item "-y <capture link type>"
Set the data link type to use while capturing packets.  The values
reported by \fB\-L\fR are the values that can be used.
.Sp
This option can occur multiple times.  If used before the first
occurrence of the \fB\-i\fR option, it sets the default capture link type.
If used after an \fB\-i\fR option, it sets the capture link type for
the interface specified by the last \fB\-i\fR option occurring before
this option.  If the capture link type is not set specifically,
the default capture link type is used if provided.
.IP "\-Y  <displaY filter>" 4
.IX Item "-Y <displaY filter>"
Cause the specified filter (which uses the syntax of read/display filters,
rather than that of capture filters) to be applied before printing a
decoded form of packets or writing packets to a file.  Packets matching the
filter are printed or written to file; packets that the matching packets
depend upon (e.g., fragments), are not printed but are written to file;
packets not matching the filter nor depended upon are discarded rather
than being printed or written.
.Sp
Use this instead of \-R for filtering using single-pass analysis. If doing
two-pass analysis (see \-2) then only packets matching the read filter (if there
is one) will be checked against this filter.
.IP "\-M  <auto session reset>" 4
.IX Item "-M <auto session reset>"
Automatically reset internal session when reached to specified number of packets.
for example,
.Sp
.Vb 1
\&    \-M 100000
.Ve
.Sp
will reset session every 100000 packets.
.Sp
This feature does not support \-2 two-pass analysis
.IP "\-z  <statistics>" 4
.IX Item "-z <statistics>"
Get \fBTShark\fR to collect various types of statistics and display the result
after finishing reading the capture file.  Use the \fB\-q\fR flag if you're
reading a capture file and only want the statistics printed, not any
per-packet information.
.Sp
Note that the \fB\-z proto\fR option is different \- it doesn't cause
statistics to be gathered and printed when the capture is complete, it
modifies the regular packet summary output to include the values of
fields specified with the option.  Therefore you must not use the \fB\-q\fR
option, as that option would suppress the printing of the regular packet
summary output, and must also not use the \fB\-V\fR option, as that would
cause packet detail information rather than packet summary information
to be printed.
.Sp
Currently implemented statistics are:
.RS 4
.IP "\fB\-z help\fR" 4
.IX Item "-z help"
Display all possible values for \fB\-z\fR.
.IP "\fB\-z\fR afp,srt[,\fIfilter\fR]" 4
.IX Item "-z afp,srt[,filter]"
Show Apple Filing Protocol service response time statistics.
.IP "\fB\-z\fR camel,srt" 4
.IX Item "-z camel,srt"
.PD 0
.IP "\fB\-z\fR compare,\fIstart\fR,\fIstop\fR,\fIttl[0|1]\fR,\fIorder[0|1]\fR,\fIvariance\fR[,\fIfilter\fR]" 4
.IX Item "-z compare,start,stop,ttl[0|1],order[0|1],variance[,filter]"
.PD
If the optional \fIfilter\fR is specified, only those packets that match the
filter will be used in the calculations.
.IP "\fB\-z\fR conv,\fItype\fR[,\fIfilter\fR]" 4
.IX Item "-z conv,type[,filter]"
Create a table that lists all conversations that could be seen in the
capture.  \fItype\fR specifies the conversation endpoint types for which we
want to generate the statistics; currently the supported ones are:
.Sp
.Vb 10
\&  "bluetooth"  Bluetooth addresses
\&  "eth"   Ethernet addresses
\&  "fc"    Fibre Channel addresses
\&  "fddi"  FDDI addresses
\&  "ip"    IPv4 addresses
\&  "ipv6"  IPv6 addresses
\&  "ipx"   IPX addresses
\&  "jxta"  JXTA message addresses
\&  "ncp"   NCP connections
\&  "rsvp"  RSVP connections
\&  "sctp"  SCTP addresses
\&  "tcp"   TCP/IP socket pairs  Both IPv4 and IPv6 are supported
\&  "tr"    Token Ring addresses
\&  "usb"   USB addresses
\&  "udp"   UDP/IP socket pairs  Both IPv4 and IPv6 are supported
\&  "wlan"  IEEE 802.11 addresses
.Ve
.Sp
If the optional \fIfilter\fR is specified, only those packets that match the
filter will be used in the calculations.
.Sp
The table is presented with one line for each conversation and displays
the number of packets/bytes in each direction as well as the total
number of packets/bytes.  The table is sorted according to the total
number of frames.
.IP "\fB\-z\fR dcerpc,srt,\fIuuid\fR,\fImajor\fR.\fIminor\fR[,\fIfilter\fR]" 4
.IX Item "-z dcerpc,srt,uuid,major.minor[,filter]"
Collect call/reply \s-1SRT \s0(Service Response Time) data for \s-1DCERPC\s0 interface \fIuuid\fR,
version \fImajor\fR.\fIminor\fR.
Data collected is the number of calls for each procedure, MinSRT, MaxSRT
and AvgSRT.
.Sp
Example: \fB\-z\ dcerpc,srt,12345778\-1234\-abcd\-ef00\-0123456789ac,1.0\fR will collect data for the \s-1CIFS SAMR\s0 Interface.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
.Sp
Example: \fB\-z\ dcerpc,srt,12345778\-1234\-abcd\-ef00\-0123456789ac,1.0,ip.addr==1.2.3.4\fR will collect \s-1SAMR
SRT\s0 statistics for a specific host.
.IP "\fB\-z\fR bootp,stat[,\fIfilter\fR]" 4
.IX Item "-z bootp,stat[,filter]"
Show \s-1DHCP \s0(\s-1BOOTP\s0) statistics.
.IP "\fB\-z\fR diameter,avp[,\fIcmd.code\fR,\fIfield\fR,\fIfield\fR,\fI...\fR]" 4
.IX Item "-z diameter,avp[,cmd.code,field,field,...]"
This option enables extraction of most important diameter fields from large capture files.
Exactly one text line for each diameter message with matched \fBdiameter.cmd.code\fR will be printed.
.Sp
Empty diameter command code or '*' can be specified to mach any \fBdiameter.cmd.code\fR
.Sp
Example: \fB\-z diameter,avp\fR  extract default field set from diameter messages.
.Sp
Example: \fB\-z diameter,avp,280\fR  extract default field set from diameter \s-1DWR\s0 messages.
.Sp
Example: \fB\-z diameter,avp,272\fR  extract default field set from diameter \s-1CC\s0 messages.
.Sp
Extract most important fields from diameter \s-1CC\s0 messages:
.Sp
\&\fBtshark \-r file.cap.gz \-q \-z diameter,avp,272,CC\-Request\-Type,CC\-Request\-Number,Session\-Id,Subscription\-Id\-Data,Rating\-Group,Result\-Code\fR
.Sp
Following fields will be printed out for each diameter message:
.Sp
.Vb 10
\&  "frame"        Frame number.
\&  "time"         Unix time of the frame arrival.
\&  "src"          Source address.
\&  "srcport"      Source port.
\&  "dst"          Destination address.
\&  "dstport"      Destination port.
\&  "proto"        Constant string \*(Aqdiameter\*(Aq, which can be used for post processing of tshark output.  E.g. grep/sed/awk.
\&  "msgnr"        seq. number of diameter message within the frame.  E.g. \*(Aq2\*(Aq for the third diameter message in the same frame.
\&  "is_request"   \*(Aq0\*(Aq if message is a request, \*(Aq1\*(Aq if message is an answer.
\&  "cmd"          diameter.cmd_code, E.g. \*(Aq272\*(Aq for credit control messages.
\&  "req_frame"    Number of frame where matched request was found or \*(Aq0\*(Aq.
\&  "ans_frame"    Number of frame where matched answer was found or \*(Aq0\*(Aq.
\&  "resp_time"    response time in seconds, \*(Aq0\*(Aq in case if matched Request/Answer is not found in trace.  E.g. in the begin or end of capture.
.Ve
.Sp
\&\fB\-z diameter,avp\fR option is much faster than \fB\-V \-T text\fR or \fB\-T pdml\fR options.
.Sp
\&\fB\-z diameter,avp\fR option is more powerful than \fB\-T field\fR and \fB\-z proto,colinfo\fR options.
.Sp
Multiple diameter messages in one frame are supported.
.Sp
Several fields with same name within one diameter message are supported, e.g. \fIdiameter.Subscription\-Id\-Data\fR or \fIdiameter.Rating\-Group\fR.
.Sp
Note: \fBtshark \-q\fR option is recommended to suppress default \fBtshark\fR output.
.IP "\fB\-z\fR dns,tree[,\fIfilter\fR]" 4
.IX Item "-z dns,tree[,filter]"
Create a summary of the captured \s-1DNS\s0 packets. General information are collected such as qtype and qclass distribution.
For some data (as qname length or \s-1DNS\s0 payload) max, min and average values are also displayed.
.IP "\fB\-z\fR endpoints,\fItype\fR[,\fIfilter\fR]" 4
.IX Item "-z endpoints,type[,filter]"
Create a table that lists all endpoints that could be seen in the
capture.  \fItype\fR specifies the endpoint types for which we
want to generate the statistics; currently the supported ones are:
.Sp
.Vb 10
\&  "bluetooth"  Bluetooth addresses
\&  "eth"   Ethernet addresses
\&  "fc"    Fibre Channel addresses
\&  "fddi"  FDDI addresses
\&  "ip"    IPv4 addresses
\&  "ipv6"  IPv6 addresses
\&  "ipx"   IPX addresses
\&  "jxta"  JXTA message addresses
\&  "ncp"   NCP connections
\&  "rsvp"  RSVP connections
\&  "sctp"  SCTP addresses
\&  "tcp"   TCP/IP socket pairs  Both IPv4 and IPv6 are supported
\&  "tr"    Token Ring addresses
\&  "usb"   USB addresses
\&  "udp"   UDP/IP socket pairs  Both IPv4 and IPv6 are supported
\&  "wlan"  IEEE 802.11 addresses
.Ve
.Sp
If the optional \fIfilter\fR is specified, only those packets that match the
filter will be used in the calculations.
.Sp
The table is presented with one line for each conversation and displays
the number of packets/bytes in each direction as well as the total
number of packets/bytes.  The table is sorted according to the total
number of frames.
.IP "\fB\-z\fR expert[\fI,error|,warn|,note|,chat\fR][\fI,filter\fR]" 4
.IX Item "-z expert[,error|,warn|,note|,chat][,filter]"
Collects information about all expert info, and will display them in order,
grouped by severity.
.Sp
Example: \fB\-z expert,sip\fR will show expert items of all severity for frames that
match the sip protocol.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
.Sp
Example: \fB\-z \*(L"expert,note,tcp\*(R"\fR will only collect expert items for frames that
include the tcp protocol, with a severity of note or higher.
.IP "\fB\-z\fR follow,\fIprot\fR,\fImode\fR,\fIfilter\fR[\fI,range\fR]" 4
.IX Item "-z follow,prot,mode,filter[,range]"
Displays the contents of a \s-1TCP\s0 or \s-1UDP\s0 stream between two nodes.  The data
sent by the second node is prefixed with a tab to differentiate it from the
data sent by the first node.
.Sp
\&\fIprot\fR specifies the transport protocol.  It can be one of:
.Sp
.Vb 3
\&  tcp   TCP
\&  udp   UDP
\&  ssl   SSL
.Ve
.Sp
\&\fImode\fR specifies the output mode.  It can be one of:
.Sp
.Vb 4
\&  ascii  ASCII output with dots for non\-printable characters
\&  ebcdic EBCDIC output with dots for non\-printable characters
\&  hex    Hexadecimal and ASCII data with offsets
\&  raw    Hexadecimal data
.Ve
.Sp
Since the output in \fBascii\fR or \fBebcdic\fR mode may contain newlines, the length
of each section of output plus a newline precedes each section of output.
.Sp
\&\fIfilter\fR specifies the stream to be displayed. \s-1UDP/TCP\s0 streams are selected
with either the stream index or \s-1IP\s0 address plus port pairs. \s-1SSL\s0 streams are
selected with the stream index. For example:
.Sp
.Vb 2
\&  ip\-addr0:port0,ip\-addr1:port1
\&  stream\-index
.Ve
.Sp
\&\fIrange\fR optionally specifies which \*(L"chunks\*(R" of the stream should be displayed.
.Sp
Example: \fB\-z \*(L"follow,tcp,hex,1\*(R"\fR will display the contents of the second \s-1TCP\s0
stream (the first is stream 0) in \*(L"hex\*(R" format.
.Sp
.Vb 10
\&  ===================================================================
\&  Follow: tcp,hex
\&  Filter: tcp.stream eq 1
\&  Node 0: 200.57.7.197:32891
\&  Node 1: 200.57.7.198:2906
\&  00000000  00 00 00 22 00 00 00 07  00 0a 85 02 07 e9 00 02  ...".... ........
\&  00000010  07 e9 06 0f 00 0d 00 04  00 00 00 01 00 03 00 06  ........ ........
\&  00000020  1f 00 06 04 00 00                                 ......
\&  00000000  00 01 00 00                                       ....
\&  00000026  00 02 00 00
.Ve
.Sp
Example: \fB\-z \*(L"follow,tcp,ascii,200.57.7.197:32891,200.57.7.198:2906\*(R"\fR will
display the contents of a \s-1TCP\s0 stream between 200.57.7.197 port 32891 and
200.57.7.98 port 2906.
.Sp
.Vb 10
\&  ===================================================================
\&  Follow: tcp,ascii
\&  Filter: (omitted for readability)
\&  Node 0: 200.57.7.197:32891
\&  Node 1: 200.57.7.198:2906
\&  38
\&  ...".....
\&  ................
\&  4
\&  ....
.Ve
.IP "\fB\-z\fR h225,counter[\fI,filter\fR]" 4
.IX Item "-z h225,counter[,filter]"
Count ITU-T H.225 messages and their reasons.  In the first column you get a
list of H.225 messages and H.225 message reasons, which occur in the current
capture file.  The number of occurrences of each message or reason is displayed
in the second column.
.Sp
Example: \fB\-z h225,counter\fR.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
Example: use \fB\-z \*(L"h225,counter,ip.addr==1.2.3.4\*(R"\fR to only collect stats for
H.225 packets exchanged by the host at \s-1IP\s0 address 1.2.3.4 .
.Sp
This option can be used multiple times on the command line.
.IP "\fB\-z\fR h225,srt[\fI,filter\fR]" 4
.IX Item "-z h225,srt[,filter]"
Collect requests/response \s-1SRT \s0(Service Response Time) data for ITU-T H.225 \s-1RAS.\s0
Data collected is number of calls of each ITU-T H.225 \s-1RAS\s0 Message Type,
Minimum \s-1SRT,\s0 Maximum \s-1SRT,\s0 Average \s-1SRT,\s0 Minimum in Packet, and Maximum in Packet.
You will also get the number of Open Requests (Unresponded Requests),
Discarded Responses (Responses without matching request) and Duplicate Messages.
.Sp
Example: \fB\-z h225,srt\fR
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
.Sp
Example: \fB\-z \*(L"h225,srt,ip.addr==1.2.3.4\*(R"\fR will only collect stats for
ITU-T H.225 \s-1RAS\s0 packets exchanged by the host at \s-1IP\s0 address 1.2.3.4 .
.IP "\fB\-z\fR hosts[,ipv4][,ipv6]" 4
.IX Item "-z hosts[,ipv4][,ipv6]"
Dump any collected IPv4 and/or IPv6 addresses in \*(L"hosts\*(R" format.  Both IPv4
and IPv6 addresses are dumped by default.
.Sp
Addresses are collected from a number of sources, including standard \*(L"hosts\*(R"
files and captured traffic.
.IP "\fB\-z\fR hpfeeds,tree[,\fIfilter\fR]" 4
.IX Item "-z hpfeeds,tree[,filter]"
Calculate statistics for \s-1HPFEEDS\s0 traffic such as publish per channel, and opcode
distribution.
.IP "\fB\-z\fR http,stat," 4
.IX Item "-z http,stat,"
Calculate the \s-1HTTP\s0 statistics distribution. Displayed values are
the \s-1HTTP\s0 status codes and the \s-1HTTP\s0 request methods.
.IP "\fB\-z\fR http,tree" 4
.IX Item "-z http,tree"
Calculate the \s-1HTTP\s0 packet distribution. Displayed values are the
\&\s-1HTTP\s0 request modes and the \s-1HTTP\s0 status codes.
.IP "\fB\-z\fR http_req,tree" 4
.IX Item "-z http_req,tree"
Calculate the \s-1HTTP\s0 requests by server. Displayed values are the
server name and the \s-1URI\s0 path.
.IP "\fB\-z\fR http_srv,tree" 4
.IX Item "-z http_srv,tree"
Calculate the \s-1HTTP\s0 requests and responses by server. For the \s-1HTTP\s0
requests, displayed values are the server \s-1IP\s0 address and server
hostname. For the \s-1HTTP\s0 responses, displayed values are the server
\&\s-1IP\s0 address and status.
.IP "\fB\-z\fR icmp,srt[,\fIfilter\fR]" 4
.IX Item "-z icmp,srt[,filter]"
Compute total \s-1ICMP\s0 echo requests, replies, loss, and percent loss, as well as
minimum, maximum, mean, median and sample standard deviation \s-1SRT\s0 statistics
typical of what ping provides.
.Sp
Example: \fB\-z\ icmp,srt,ip.src==1.2.3.4\fR will collect \s-1ICMP SRT\s0 statistics
for \s-1ICMP\s0 echo request packets originating from a specific host.
.Sp
This option can be used multiple times on the command line.
.IP "\fB\-z\fR icmpv6,srt[,\fIfilter\fR]" 4
.IX Item "-z icmpv6,srt[,filter]"
Compute total ICMPv6 echo requests, replies, loss, and percent loss, as well as
minimum, maximum, mean, median and sample standard deviation \s-1SRT\s0 statistics
typical of what ping provides.
.Sp
Example: \fB\-z\ icmpv6,srt,ipv6.src==fe80::1\fR will collect ICMPv6 \s-1SRT\s0 statistics
for ICMPv6 echo request packets originating from a specific host.
.Sp
This option can be used multiple times on the command line.
.IP "\fB\-z\fR io,phs[,\fIfilter\fR]" 4
.IX Item "-z io,phs[,filter]"
Create Protocol Hierarchy Statistics listing both number of packets and bytes.
If no \fIfilter\fR is specified the statistics will be calculated for all packets.
If a \fIfilter\fR is specified statistics will only be calculated for those
packets that match the filter.
.Sp
This option can be used multiple times on the command line.
.IP "\fB\-z\fR io,stat,\fIinterval\fR[,\fIfilter\fR][,\fIfilter\fR][,\fIfilter\fR]..." 4
.IX Item "-z io,stat,interval[,filter][,filter][,filter]..."
Collect packet/bytes statistics for the capture in intervals of
\&\fIinterval\fR seconds.  \fIInterval\fR can be specified either as a whole or
fractional second and can be specified with microsecond (us) resolution.
If \fIinterval\fR is 0, the statistics will be calculated over all packets.
.Sp
If no \fIfilter\fR is specified the statistics will be calculated for all packets.
If one or more \fIfilters\fR are specified statistics will be calculated for
all filters and presented with one column of statistics for each filter.
.Sp
This option can be used multiple times on the command line.
.Sp
Example: \fB\-z io,stat,1,ip.addr==1.2.3.4\fR will generate 1 second
statistics for all traffic to/from host 1.2.3.4.
.Sp
Example: \fB\-z \*(L"io,stat,0.001,smb&&ip.addr==1.2.3.4\*(R"\fR will generate 1ms
statistics for all \s-1SMB\s0 packets to/from host 1.2.3.4.
.Sp
The examples above all use the standard syntax for generating statistics
which only calculates the number of packets and bytes in each interval.
.Sp
\&\fBio,stat\fR can also do much more statistics and calculate \s-1\fICOUNT\s0()\fR, \s-1\fISUM\s0()\fR,
\&\s-1\fIMIN\s0()\fR, \s-1\fIMAX\s0()\fR, \s-1\fIAVG\s0()\fR and \s-1\fILOAD\s0()\fR using a slightly different filter syntax:
.ie n .IP "\-z io,stat,\fIinterval\fR,""[COUNT|SUM|MIN|MAX|AVG|LOAD](\fIfield\fR)\fIfilter\fR""" 4
.el .IP "\-z io,stat,\fIinterval\fR,``[COUNT|SUM|MIN|MAX|AVG|LOAD](\fIfield\fR)\fIfilter\fR''" 4
.IX Item "-z io,stat,interval,""[COUNT|SUM|MIN|MAX|AVG|LOAD](field)filter"""
\&\s-1NOTE:\s0 One important thing to note here is that the filter is not optional
and that the field that the calculation is based on \s-1MUST\s0 be part of the filter
string or the calculation will fail.
.Sp
So: \fB\-z io,stat,0.010,AVG(smb.time)\fR does not work.  Use \fB\-z
io,stat,0.010,AVG(smb.time)smb.time\fR instead.  Also be aware that a field
can exist multiple times inside the same packet and will then be counted
multiple times in those packets.
.Sp
\&\s-1NOTE: A\s0 second important thing to note is that the system setting for
decimal separator must be set to \*(L".\*(R"! If it is set to \*(L",\*(R" the statistics
will not be displayed per filter.
.Sp
\&\fB\s-1COUNT\s0(\f(BIfield\fB)\f(BIfilter\fB\fR \- Calculates the number of times that the
field \fIname\fR (not its value) appears per interval in the filtered packet list.
\&''\fIfield\fR'' can be any display filter name.
.Sp
Example: \fB\-z io,stat,0.010,\*(L"\s-1COUNT\s0(smb.sid)smb.sid\*(R"\fR
.Sp
This will count the total number of SIDs seen in each 10ms interval.
.Sp
\&\fB\s-1SUM\s0(\f(BIfield\fB)\f(BIfilter\fB\fR \- Unlike \s-1COUNT,\s0 the \fIvalues\fR of the
specified field are summed per time interval.
\&''\fIfield\fR'' can only be a named integer, float, double or relative time field.
.Sp
Example: \fB\-z io,stat,0.010,\*(L"\s-1SUM\s0(frame.len)frame.len\*(R"\fR
.Sp
Reports the total number of bytes that were transmitted bidirectionally in
all the packets within a 10 millisecond interval.
.Sp
\&\fB\s-1MIN/MAX/AVG\s0(\f(BIfield\fB)\f(BIfilter\fB\fR \- The minimum, maximum, or average field value
in each interval is calculated.  The specified field must be a named integer,
float, double or relative time field.  For relative time fields, the output is presented in
seconds with six decimal digits of precision rounded to the nearest microsecond.
.Sp
In the following example, the time of the first Read_AndX call, the last Read_AndX
response values are displayed and the minimum, maximum, and average Read response times
(SRTs) are calculated.  \s-1NOTE:\s0 If the \s-1DOS\s0 command shell line continuation character, ''^''
is used, each line cannot end in a comma so it is placed at the beginning of each
continuation line:
.Sp
.Vb 6
\&  tshark \-o tcp.desegment_tcp_streams:FALSE \-n \-q \-r smb_reads.cap \-z io,stat,0,
\&  "MIN(frame.time_relative)frame.time_relative and smb.cmd==0x2e and smb.flags.response==0",
\&  "MAX(frame.time_relative)frame.time_relative and smb.cmd==0x2e and smb.flags.response==1",
\&  "MIN(smb.time)smb.time and smb.cmd==0x2e",
\&  "MAX(smb.time)smb.time and smb.cmd==0x2e",
\&  "AVG(smb.time)smb.time and smb.cmd==0x2e"
\&
\&
\&  ======================================================================================================
\&  IO Statistics
\&  Column #0: MIN(frame.time_relative)frame.time_relative and smb.cmd==0x2e and smb.flags.response==0
\&  Column #1: MAX(frame.time_relative)frame.time_relative and smb.cmd==0x2e and smb.flags.response==1
\&  Column #2: MIN(smb.time)smb.time and smb.cmd==0x2e
\&  Column #3: MAX(smb.time)smb.time and smb.cmd==0x2e
\&  Column #4: AVG(smb.time)smb.time and smb.cmd==0x2e
\&                  |    Column #0   |    Column #1   |    Column #2   |    Column #3   |    Column #4   |
\&  Time            |       MIN      |       MAX      |       MIN      |       MAX      |       AVG      |
\&  000.000\-                 0.000000         7.704054         0.000072         0.005539         0.000295
\&  ======================================================================================================
.Ve
.Sp
The following command displays the average \s-1SMB\s0 Read response \s-1PDU\s0 size, the
total number of read \s-1PDU\s0 bytes, the average \s-1SMB\s0 Write request \s-1PDU\s0 size, and
the total number of bytes transferred in \s-1SMB\s0 Write PDUs:
.Sp
.Vb 5
\&  tshark \-n \-q \-r smb_reads_writes.cap \-z io,stat,0,
\&  "AVG(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2e and smb.response_to",
\&  "SUM(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2e and smb.response_to",
\&  "AVG(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2f and not smb.response_to",
\&  "SUM(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2f and not smb.response_to"
\&
\&  =====================================================================================
\&  IO Statistics
\&  Column #0: AVG(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2e and smb.response_to
\&  Column #1: SUM(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2e and smb.response_to
\&  Column #2: AVG(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2f and not smb.response_to
\&  Column #3: SUM(smb.file.rw.length)smb.file.rw.length and smb.cmd==0x2f and not smb.response_to
\&                  |    Column #0   |    Column #1   |    Column #2   |    Column #3   |
\&  Time            |       AVG      |       SUM      |       AVG      |       SUM      |
\&  000.000\-                    30018         28067522               72             3240
\&  =====================================================================================
.Ve
.Sp
\&\fB\s-1LOAD\s0(\f(BIfield\fB)\f(BIfilter\fB\fR \- The LOAD/Queue\-Depth
in each interval is calculated.  The specified field must be a relative time field that represents a response time.  For example smb.time.
For each interval the Queue-Depth for the specified protocol is calculated.
.Sp
The following command displays the average \s-1SMB LOAD.
A\s0 value of 1.0 represents one I/O in flight.
.Sp
.Vb 2
\&  tshark \-n \-q \-r smb_reads_writes.cap
\&  \-z "io,stat,0.001,LOAD(smb.time)smb.time"
\&
\&  ============================================================================
\&  IO Statistics
\&  Interval:   0.001000 secs
\&  Column #0: LOAD(smb.time)smb.time
\&                          |    Column #0   |
\&  Time                    |       LOAD     |
\&  0000.000000\-0000.001000         1.000000
\&  0000.001000\-0000.002000         0.741000
\&  0000.002000\-0000.003000         0.000000
\&  0000.003000\-0000.004000         1.000000
.Ve
.Sp
\&\fB\s-1FRAMES\s0 | BYTES[()\f(BIfilter\fB]\fR \- Displays the total number of frames or bytes.
The filter field is optional but if included it must be prepended with ''()''.
.Sp
The following command displays five columns: the total number of frames and bytes
(transferred bidirectionally) using a single comma, the same two stats using the \s-1FRAMES\s0 and \s-1BYTES\s0
subcommands, the total number of frames containing at least one \s-1SMB\s0 Read response, and
the total number of bytes transmitted to the client (unidirectionally) at \s-1IP\s0 address 10.1.0.64.
.Sp
.Vb 2
\&  tshark \-o tcp.desegment_tcp_streams:FALSE \-n \-q \-r smb_reads.cap \-z io,stat,0,,FRAMES,BYTES,
\&  "FRAMES()smb.cmd==0x2e and smb.response_to","BYTES()ip.dst==10.1.0.64"
\&
\&  =======================================================================================================================
\&  IO Statistics
\&  Column #0:
\&  Column #1: FRAMES
\&  Column #2: BYTES
\&  Column #3: FRAMES()smb.cmd==0x2e and smb.response_to
\&  Column #4: BYTES()ip.dst==10.1.0.64
\&                  |            Column #0            |    Column #1   |    Column #2   |    Column #3   |    Column #4   |
\&  Time            |     Frames     |      Bytes     |     FRAMES     |     BYTES      |     FRAMES     |     BYTES      |
\&  000.000\-                    33576         29721685            33576         29721685              870         29004801
\&  =======================================================================================================================
.Ve
.IP "\fB\-z\fR mac\-lte,stat[\fI,filter\fR]" 4
.IX Item "-z mac-lte,stat[,filter]"
This option will activate a counter for \s-1LTE MAC\s0 messages.  You will get
information about the maximum number of UEs/TTI, common messages and
various counters for each \s-1UE\s0 that appears in the log.
.Sp
Example: \fB\-z mac\-lte,stat\fR.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
for those frames that match that filter.
Example: \fB\-z "mac\-lte,stat,mac\-lte.rnti\fR3000"> will only collect stats for
UEs with an assigned \s-1RNTI\s0 whose value is more than 3000.
.IP "\fB\-z\fR megaco,rtd[\fI,filter\fR]" 4
.IX Item "-z megaco,rtd[,filter]"
Collect requests/response \s-1RTD \s0(Response Time Delay) data for \s-1MEGACO.
\&\s0(This is similar to \fB\-z smb,srt\fR).  Data collected is the number of calls
for each known \s-1MEGACO\s0 Type, MinRTD, MaxRTD and AvgRTD.
Additionally you get the number of duplicate requests/responses,
unresponded requests, responses, which don't match with any request.
Example: \fB\-z megaco,rtd\fR.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
Example: \fB\-z \*(L"megaco,rtd,ip.addr==1.2.3.4\*(R"\fR will only collect stats for
\&\s-1MEGACO\s0 packets exchanged by the host at \s-1IP\s0 address 1.2.3.4 .
.Sp
This option can be used multiple times on the command line.
.IP "\fB\-z\fR mgcp,rtd[\fI,filter\fR]" 4
.IX Item "-z mgcp,rtd[,filter]"
Collect requests/response \s-1RTD \s0(Response Time Delay) data for \s-1MGCP.
\&\s0(This is similar to \fB\-z smb,srt\fR).  Data collected is the number of calls
for each known \s-1MGCP\s0 Type, MinRTD, MaxRTD and AvgRTD.
Additionally you get the number of duplicate requests/responses,
unresponded requests, responses, which don't match with any request.
Example: \fB\-z mgcp,rtd\fR.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
Example: \fB\-z \*(L"mgcp,rtd,ip.addr==1.2.3.4\*(R"\fR will only collect stats for
\&\s-1MGCP\s0 packets exchanged by the host at \s-1IP\s0 address 1.2.3.4 .
.IP "\fB\-z\fR proto,colinfo,\fIfilter\fR,\fIfield\fR" 4
.IX Item "-z proto,colinfo,filter,field"
Append all \fIfield\fR values for the packet to the Info column of the
one-line summary output.
This feature can be used to append arbitrary fields to the Info column
in addition to the normal content of that column.
\&\fIfield\fR is the display-filter name of a field which value should be placed
in the Info column.
\&\fIfilter\fR is a filter string that controls for which packets the field value
will be presented in the info column.  \fIfield\fR will only be presented in the
Info column for the packets which match \fIfilter\fR.
.Sp
\&\s-1NOTE:\s0 In order for \fBTShark\fR to be able to extract the \fIfield\fR value
from the packet, \fIfield\fR \s-1MUST\s0 be part of the \fIfilter\fR string.  If not,
\&\fBTShark\fR will not be able to extract its value.
.Sp
For a simple example to add the \*(L"nfs.fh.hash\*(R" field to the Info column
for all packets containing the \*(L"nfs.fh.hash\*(R" field, use
.Sp
\&\fB\-z proto,colinfo,nfs.fh.hash,nfs.fh.hash\fR
.Sp
To put \*(L"nfs.fh.hash\*(R" in the Info column but only for packets coming from
host 1.2.3.4 use:
.Sp
\&\fB\-z \*(L"proto,colinfo,nfs.fh.hash && ip.src==1.2.3.4,nfs.fh.hash\*(R"\fR
.Sp
This option can be used multiple times on the command line.
.IP "\fB\-z\fR rlc\-lte,stat[\fI,filter\fR]" 4
.IX Item "-z rlc-lte,stat[,filter]"
This option will activate a counter for \s-1LTE RLC\s0 messages.  You will get
information about common messages and various counters for each \s-1UE\s0 that appears
in the log.
.Sp
Example: \fB\-z rlc\-lte,stat\fR.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
for those frames that match that filter.
Example: \fB\-z "rlc\-lte,stat,rlc\-lte.ueid\fR3000"> will only collect stats for
UEs with a UEId of more than 3000.
.IP "\fB\-z\fR rpc,programs" 4
.IX Item "-z rpc,programs"
Collect call/reply \s-1SRT\s0 data for all known ONC-RPC programs/versions.
Data collected is number of calls for each protocol/version, MinSRT,
MaxSRT and AvgSRT.
This option can only be used once on the command line.
.IP "\fB\-z\fR rpc,srt,\fIprogram\fR,\fIversion\fR[,\fIfilter\fR]" 4
.IX Item "-z rpc,srt,program,version[,filter]"
Collect call/reply \s-1SRT \s0(Service Response Time) data for \fIprogram\fR/\fIversion\fR.
Data collected is the number of calls for each procedure, MinSRT, MaxSRT,
AvgSRT, and the total time taken for each procedure.
.Sp
Example: \fB\-z rpc,srt,100003,3\fR will collect data for \s-1NFS\s0 v3.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
.Sp
Example: \fB\-z rpc,srt,100003,3,nfs.fh.hash==0x12345678\fR will collect \s-1NFS\s0 v3
\&\s-1SRT\s0 statistics for a specific file.
.IP "\fB\-z\fR rtp,streams" 4
.IX Item "-z rtp,streams"
Collect statistics for all \s-1RTP\s0 streams and calculate max. delta, max. and
mean jitter and packet loss percentages.
.IP "\fB\-z\fR scsi,srt,\fIcmdset\fR[,\fIfilter\fR]" 4
.IX Item "-z scsi,srt,cmdset[,filter]"
Collect call/reply \s-1SRT \s0(Service Response Time) data for \s-1SCSI\s0 commandset \fIcmdset\fR.
.Sp
Commandsets are 0:SBC   1:SSC  5:MMC
.Sp
Data collected
is the number of calls for each procedure, MinSRT, MaxSRT and AvgSRT.
.Sp
Example: \fB\-z scsi,srt,0\fR will collect data for \s-1SCSI BLOCK COMMANDS \s0(\s-1SBC\s0).
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
.Sp
Example: \fB\-z scsi,srt,0,ip.addr==1.2.3.4\fR will collect \s-1SCSI SBC
SRT\s0 statistics for a specific iscsi/ifcp/fcip host.
.IP "\fB\-z\fR sip,stat[\fI,filter\fR]" 4
.IX Item "-z sip,stat[,filter]"
This option will activate a counter for \s-1SIP\s0 messages.  You will get the number
of occurrences of each \s-1SIP\s0 Method and of each \s-1SIP\s0 Status-Code.  Additionally
you also get the number of resent \s-1SIP\s0 Messages (only for \s-1SIP\s0 over \s-1UDP\s0).
.Sp
Example: \fB\-z sip,stat\fR.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
Example: \fB\-z \*(L"sip,stat,ip.addr==1.2.3.4\*(R"\fR will only collect stats for
\&\s-1SIP\s0 packets exchanged by the host at \s-1IP\s0 address 1.2.3.4 .
.IP "\fB\-z\fR smb,sids" 4
.IX Item "-z smb,sids"
When this feature is used \fBTShark\fR will print a report with all the
discovered \s-1SID\s0 and account name mappings.  Only those SIDs where the
account name is known will be presented in the table.
.Sp
For this feature to work you will need to either to enable
\&\*(L"Edit/Preferences/Protocols/SMB/Snoop \s-1SID\s0 to name mappings\*(R" in the
preferences or you can override the preferences by specifying
\&\fB\-o\ \*(L"smb.sid_name_snooping:TRUE\*(R"\fR on the \fBTShark\fR command line.
.Sp
The current method used by \fBTShark\fR to find the \s-1SID\-\s0>name mapping
is relatively restricted with a hope of future expansion.
.IP "\fB\-z\fR smb,srt[,\fIfilter\fR]" 4
.IX Item "-z smb,srt[,filter]"
Collect call/reply \s-1SRT \s0(Service Response Time) data for \s-1SMB. \s0 Data collected
is number of calls for each \s-1SMB\s0 command, MinSRT, MaxSRT and AvgSRT.
.Sp
Example: \fB\-z smb,srt\fR
.Sp
The data will be presented as separate tables for all normal \s-1SMB\s0 commands,
all Transaction2 commands and all \s-1NT\s0 Transaction commands.
Only those commands that are seen in the capture will have its stats
displayed.
Only the first command in a xAndX command chain will be used in the
calculation.  So for common SessionSetupAndX + TreeConnectAndX chains,
only the SessionSetupAndX call will be used in the statistics.
This is a flaw that might be fixed in the future.
.Sp
This option can be used multiple times on the command line.
.Sp
If the optional \fIfilter\fR is provided, the stats will only be calculated
on those calls that match that filter.
.Sp
Example: \fB\-z \*(L"smb,srt,ip.addr==1.2.3.4\*(R"\fR will only collect stats for
\&\s-1SMB\s0 packets exchanged by the host at \s-1IP\s0 address 1.2.3.4 .
.RE
.RS 4
.RE
.IP "\-\-capture\-comment <comment>" 4
.IX Item "--capture-comment <comment>"
Add a capture comment to the output file.
.Sp
This option is only available if a new output file in pcapng format is
created. Only one capture comment may be set per output file.
.IP "\-\-export\-objects <protocol>,<destdir>" 4
.IX Item "--export-objects <protocol>,<destdir>"
Export all objects within a protocol into directory \fBdestdir\fR. The available
values for \fBprotocol\fR can be listed with \fB\-\-export\-objects help\fR.
.Sp
The objects are directly saved in the given directory. Filenames are dependent
on the dissector, but typically it is named after the basename of a file.
Duplicate files are not overwritten, instead an increasing number is appended
before the file extension.
.Sp
This interface is subject to change, adding the possibility to filter on files.
.IP "\-\-enable\-protocol <proto_name>" 4
.IX Item "--enable-protocol <proto_name>"
Enable dissection of proto_name.
.IP "\-\-disable\-protocol <proto_name>" 4
.IX Item "--disable-protocol <proto_name>"
Disable dissection of proto_name.
.IP "\-\-enable\-heuristic <short_name>" 4
.IX Item "--enable-heuristic <short_name>"
Enable dissection of heuristic protocol.
.IP "\-\-disable\-heuristic <short_name>" 4
.IX Item "--disable-heuristic <short_name>"
Disable dissection of heuristic protocol.
.SH "CAPTURE FILTER SYNTAX"
.IX Header "CAPTURE FILTER SYNTAX"
See the manual page of \fIpcap\-filter\fR\|(7) or, if that doesn't exist, \fItcpdump\fR\|(8),
or, if that doesn't exist, <https://wiki.wireshark.org/CaptureFilters>.
.SH "READ FILTER SYNTAX"
.IX Header "READ FILTER SYNTAX"
For a complete table of protocol and protocol fields that are filterable
in \fBTShark\fR see the \fIwireshark\-filter\fR\|(4) manual page.
.SH "FILES"
.IX Header "FILES"
These files contains various \fBWireshark\fR configuration values.
.IP "Preferences" 4
.IX Item "Preferences"
The \fIpreferences\fR files contain global (system-wide) and personal
preference settings.  If the system-wide preference file exists, it is
read first, overriding the default settings.  If the personal preferences
file exists, it is read next, overriding any previous values.  Note: If
the command line option \fB\-o\fR is used (possibly more than once), it will
in turn override values from the preferences files.
.Sp
The preferences settings are in the form \fIprefname\fR\fB:\fR\fIvalue\fR,
one per line,
where \fIprefname\fR is the name of the preference
and \fIvalue\fR is the value to
which it should be set; white space is allowed between \fB:\fR and
\&\fIvalue\fR.  A preference setting can be continued on subsequent lines by
indenting the continuation lines with white space.  A \fB#\fR character
starts a comment that runs to the end of the line:
.Sp
.Vb 3
\&  # Capture in promiscuous mode?
\&  # TRUE or FALSE (case\-insensitive).
\&  capture.prom_mode: TRUE
.Ve
.Sp
The global preferences file is looked for in the \fIwireshark\fR directory
under the \fIshare\fR subdirectory of the main installation directory (for
example, \fI/usr/local/share/wireshark/preferences\fR) on UNIX-compatible
systems, and in the main installation directory (for example,
\&\fIC:\eProgram Files\eWireshark\epreferences\fR) on Windows systems.
.Sp
The personal preferences file is looked for in
\&\fI\f(CI$XDG_CONFIG_HOME\fI/wireshark/preferences\fR
(or, if \fI\f(CI$XDG_CONFIG_HOME\fI/wireshark\fR does not exist while \fI\f(CI$HOME\fI/.wireshark\fR
is present, \fI\f(CI$HOME\fI/.wireshark/preferences\fR) on
UNIX-compatible systems and \fI\f(CI%APPDATA\fI%\eWireshark\epreferences\fR (or, if
\&\f(CW%APPDATA\fR% isn't defined, \fI\f(CI%USERPROFILE\fI%\eApplication
Data\eWireshark\epreferences\fR) on Windows systems.
.IP "Disabled (Enabled) Protocols" 4
.IX Item "Disabled (Enabled) Protocols"
The \fIdisabled_protos\fR files contain system-wide and personal lists of
protocols that have been disabled, so that their dissectors are never
called.  The files contain protocol names, one per line, where the
protocol name is the same name that would be used in a display filter
for the protocol:
.Sp
.Vb 2
\&  http
\&  tcp     # a comment
.Ve
.Sp
The global \fIdisabled_protos\fR file uses the same directory as the global
preferences file.
.Sp
The personal \fIdisabled_protos\fR file uses the same directory as the
personal preferences file.
.IP "Name Resolution (hosts)" 4
.IX Item "Name Resolution (hosts)"
If the personal \fIhosts\fR file exists, it is
used to resolve IPv4 and IPv6 addresses before any other
attempts are made to resolve them.  The file has the standard \fIhosts\fR
file syntax; each line contains one \s-1IP\s0 address and name, separated by
whitespace.  The same directory as for the personal preferences file is
used.
.Sp
Capture filter name resolution is handled by libpcap on UNIX-compatible
systems and WinPcap on Windows.  As such the Wireshark personal \fIhosts\fR file
will not be consulted for capture filter name resolution.
.IP "Name Resolution (subnets)" 4
.IX Item "Name Resolution (subnets)"
If an IPv4 address cannot be translated via name resolution (no exact
match is found) then a partial match is attempted via the \fIsubnets\fR file.
.Sp
Each line of this file consists of an IPv4 address, a subnet mask length
separated only by a / and a name separated by whitespace. While the address
must be a full IPv4 address, any values beyond the mask length are subsequently
ignored.
.Sp
An example is:
.Sp
# Comments must be prepended by the # sign!
192.168.0.0/24 ws_test_network
.Sp
A partially matched name will be printed as \*(L"subnet\-name.remaining\-address\*(R".
For example, \*(L"192.168.0.1\*(R" under the subnet above would be printed as
\&\*(L"ws_test_network.1\*(R"; if the mask length above had been 16 rather than 24, the
printed address would be ``ws_test_network.0.1".
.IP "Name Resolution (ethers)" 4
.IX Item "Name Resolution (ethers)"
The \fIethers\fR files are consulted to correlate 6\-byte hardware addresses to
names.  First the personal \fIethers\fR file is tried and if an address is not
found there the global \fIethers\fR file is tried next.
.Sp
Each line contains one hardware address and name, separated by
whitespace.  The digits of the hardware address are separated by colons
(:), dashes (\-) or periods (.).  The same separator character must be
used consistently in an address.  The following three lines are valid
lines of an \fIethers\fR file:
.Sp
.Vb 3
\&  ff:ff:ff:ff:ff:ff          Broadcast
\&  c0\-00\-ff\-ff\-ff\-ff          TR_broadcast
\&  00.00.00.00.00.00          Zero_broadcast
.Ve
.Sp
The global \fIethers\fR file is looked for in the \fI/etc\fR directory on
UNIX-compatible systems, and in the main installation directory (for
example, \fIC:\eProgram Files\eWireshark\fR) on Windows systems.
.Sp
The personal \fIethers\fR file is looked for in the same directory as the personal
preferences file.
.Sp
Capture filter name resolution is handled by libpcap on UNIX-compatible
systems and WinPcap on Windows.  As such the Wireshark personal \fIethers\fR file
will not be consulted for capture filter name resolution.
.IP "Name Resolution (manuf)" 4
.IX Item "Name Resolution (manuf)"
The \fImanuf\fR file is used to match the 3\-byte vendor portion of a 6\-byte
hardware address with the manufacturer's name; it can also contain well-known
\&\s-1MAC\s0 addresses and address ranges specified with a netmask.  The format of the
file is the same as the \fIethers\fR files, except that entries of the form:
.Sp
.Vb 1
\&  00:00:0C      Cisco
.Ve
.Sp
can be provided, with the 3\-byte \s-1OUI\s0 and the name for a vendor, and
entries such as:
.Sp
.Vb 1
\&  00\-00\-0C\-07\-AC/40     All\-HSRP\-routers
.Ve
.Sp
can be specified, with a \s-1MAC\s0 address and a mask indicating how many bits
of the address must match.  The above entry, for example, has 40
significant bits, or 5 bytes, and would match addresses from
00\-00\-0C\-07\-AC\-00 through 00\-00\-0C\-07\-AC\-FF.  The mask need not be a
multiple of 8.
.Sp
The \fImanuf\fR file is looked for in the same directory as the global
preferences file.
.IP "Name Resolution (services)" 4
.IX Item "Name Resolution (services)"
The \fIservices\fR file is used to translate port numbers into names.
.Sp
The file has the standard \fIservices\fR file syntax; each line contains one
(service) name and one transport identifier separated by white space.  The
transport identifier includes one port number and one transport protocol name
(typically tcp, udp, or sctp) separated by a /.
.Sp
An example is:
.Sp
mydns       5045/udp     # My own Domain Name Server
mydns       5045/tcp     # My own Domain Name Server
.IP "Name Resolution (ipxnets)" 4
.IX Item "Name Resolution (ipxnets)"
The \fIipxnets\fR files are used to correlate 4\-byte \s-1IPX\s0 network numbers to
names.  First the global \fIipxnets\fR file is tried and if that address is not
found there the personal one is tried next.
.Sp
The format is the same as the \fIethers\fR
file, except that each address is four bytes instead of six.
Additionally, the address can be represented as a single hexadecimal
number, as is more common in the \s-1IPX\s0 world, rather than four hex octets.
For example, these four lines are valid lines of an \fIipxnets\fR file:
.Sp
.Vb 4
\&  C0.A8.2C.00              HR
\&  c0\-a8\-1c\-00              CEO
\&  00:00:BE:EF              IT_Server1
\&  110f                     FileServer3
.Ve
.Sp
The global \fIipxnets\fR file is looked for in the \fI/etc\fR directory on
UNIX-compatible systems, and in the main installation directory (for
example, \fIC:\eProgram Files\eWireshark\fR) on Windows systems.
.Sp
The personal \fIipxnets\fR file is looked for in the same directory as the
personal preferences file.
.SH "OUTPUT"
.IX Header "OUTPUT"
\&\fBTShark\fR uses \s-1UTF\-8\s0 to represent strings internally. In some cases the
output might not be valid. For example, a dissector might generate
invalid \s-1UTF\-8\s0 character sequences. Programs reading \fBTShark\fR output
should expect \s-1UTF\-8\s0 and be prepared for invalid output.
.PP
If \fBTShark\fR detects that it is writing to a \s-1TTY\s0 on \s-1UNIX\s0 or Linux and
the locale does not support \s-1UTF\-8,\s0 output will be re-encoded to match the
current locale.
.PP
If \fBTShark\fR detects that it is writing to a \s-1TTY\s0 on Windows, output will be
encoded as \s-1UTF\-16LE.\s0
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "\s-1WIRESHARK_APPDATA\s0" 4
.IX Item "WIRESHARK_APPDATA"
On Windows, Wireshark normally stores all application data in \f(CW%APPDATA\fR% or
\&\f(CW%USERPROFILE\fR%.  You can override the default location by exporting this
environment variable to specify an alternate location.
.IP "\s-1WIRESHARK_DEBUG_WMEM_OVERRIDE\s0" 4
.IX Item "WIRESHARK_DEBUG_WMEM_OVERRIDE"
Setting this environment variable forces the wmem framework to use the
specified allocator backend for *all* allocations, regardless of which
backend is normally specified by the code. This is mainly useful to developers
when testing or debugging. See \fI\s-1README\s0.wmem\fR in the source distribution for
details.
.IP "\s-1WIRESHARK_RUN_FROM_BUILD_DIRECTORY\s0" 4
.IX Item "WIRESHARK_RUN_FROM_BUILD_DIRECTORY"
This environment variable causes the plugins and other data files to be loaded
from the build directory (where the program was compiled) rather than from the
standard locations.  It has no effect when the program in question is running
with root (or setuid) permissions on *NIX.
.IP "\s-1WIRESHARK_DATA_DIR\s0" 4
.IX Item "WIRESHARK_DATA_DIR"
This environment variable causes the various data files to be loaded from
a directory other than the standard locations.  It has no effect when the
program in question is running with root (or setuid) permissions on *NIX.
.IP "\s-1ERF_RECORDS_TO_CHECK\s0" 4
.IX Item "ERF_RECORDS_TO_CHECK"
This environment variable controls the number of \s-1ERF\s0 records checked when
deciding if a file really is in the \s-1ERF\s0 format.  Setting this environment
variable a number higher than the default (20) would make false positives
less likely.
.IP "\s-1IPFIX_RECORDS_TO_CHECK\s0" 4
.IX Item "IPFIX_RECORDS_TO_CHECK"
This environment variable controls the number of \s-1IPFIX\s0 records checked when
deciding if a file really is in the \s-1IPFIX\s0 format.  Setting this environment
variable a number higher than the default (20) would make false positives
less likely.
.IP "\s-1WIRESHARK_ABORT_ON_DISSECTOR_BUG\s0" 4
.IX Item "WIRESHARK_ABORT_ON_DISSECTOR_BUG"
If this environment variable is set, \fBTShark\fR will call \fIabort\fR\|(3)
when a dissector bug is encountered.  \fIabort\fR\|(3) will cause the program to
exit abnormally; if you are running \fBTShark\fR in a debugger, it
should halt in the debugger and allow inspection of the process, and, if
you are not running it in a debugger, it will, on some OSes, assuming
your environment is configured correctly, generate a core dump file.
This can be useful to developers attempting to troubleshoot a problem
with a protocol dissector.
.IP "\s-1WIRESHARK_ABORT_ON_TOO_MANY_ITEMS\s0" 4
.IX Item "WIRESHARK_ABORT_ON_TOO_MANY_ITEMS"
If this environment variable is set, \fBTShark\fR will call \fIabort\fR\|(3)
if a dissector tries to add too many items to a tree (generally this
is an indication of the dissector not breaking out of a loop soon enough).
\&\fIabort\fR\|(3) will cause the program to exit abnormally; if you are running
\&\fBTShark\fR in a debugger, it should halt in the debugger and allow
inspection of the process, and, if you are not running it in a debugger,
it will, on some OSes, assuming your environment is configured correctly,
generate a core dump file.  This can be useful to developers attempting to
troubleshoot a problem with a protocol dissector.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIwireshark\-filter\fR\|(4), \fIwireshark\fR\|(1), \fIeditcap\fR\|(1), \fIpcap\fR\|(3), \fIdumpcap\fR\|(1),
\&\fItext2pcap\fR\|(1), \fImergecap\fR\|(1), \fIpcap\-filter\fR\|(7) or \fItcpdump\fR\|(8)
.SH "NOTES"
.IX Header "NOTES"
\&\fBTShark\fR is part of the \fBWireshark\fR distribution.  The latest version
of \fBWireshark\fR can be found at <https://www.wireshark.org>.
.PP
\&\s-1HTML\s0 versions of the Wireshark project man pages are available at:
<https://www.wireshark.org/docs/man\-pages>.
.SH "AUTHORS"
.IX Header "AUTHORS"
\&\fBTShark\fR uses the same packet dissection code that \fBWireshark\fR does,
as well as using many other modules from \fBWireshark\fR; see the list of
authors in the \fBWireshark\fR man page for a list of authors of that code.
